<?xml version="1.0" encoding="UTF-8"?>
<issues format="4" by="lint 3.0.0">

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return commandResult.successMsg != null &amp;&amp; commandResult.successMsg.toLowerCase().contains(&quot;success&quot;);"
        errorLine2="                                                                            ~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\util\AppUtils.java"
            line="55"
            column="77"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return commandResult.successMsg != null &amp;&amp; commandResult.successMsg.toLowerCase().contains(&quot;success&quot;);"
        errorLine2="                                                                            ~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\util\AppUtils.java"
            line="92"
            column="77"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="                                return index &lt; 0 ? hostAddress.toUpperCase() : hostAddress.substring(0, index).toUpperCase();"
        errorLine2="                                                               ~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\util\NetworkUtils.java"
            line="295"
            column="64"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toUpperCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="        return md5StrBuff.substring(8, 24).toString().toUpperCase();"
        errorLine2="          ~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\SimpleUtil.java"
            line="45"
            column="11"/>
    </issue>

    <issue
        id="DefaultLocale"
        severity="Warning"
        message="Implicitly using the default locale is a common source of bugs: Use `toLowerCase(Locale)` instead. For strings meant to be internal use `Locale.ROOT`, otherwise `Locale.getDefault()`."
        category="Correctness"
        priority="6"
        summary="Implied default locale in case conversion"
        explanation="Calling `String#toLowerCase()` or `#toUpperCase()` **without specifying an explicit locale** is a common source of bugs. The reason for that is that those methods will use the current locale on the user&apos;s device, and even though the code appears to work correctly when you are developing the app, it will fail in some locales. For example, in the Turkish locale, the uppercase replacement for `i` is **not** `I`.&#xA;&#xA;If you want the methods to just perform ASCII replacement, for example to convert an enum name, call `String#toUpperCase(Locale.US)` instead. If you really want to use the current locale, call `String#toUpperCase(Locale.getDefault())` instead."
        url="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        urls="http://developer.android.com/reference/java/util/Locale.html#default_locale"
        errorLine1="            if (StringUtils.isEmpty(keyword) || FileUtils.getFileName(entryName).toLowerCase().contains(keyword.toLowerCase())) {"
        errorLine2="                                                                                 ~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\ZipUtils.java"
            line="210"
            column="82"/>
    </issue>

    <issue
        id="ExifInterface"
        severity="Warning"
        message="Avoid using `android.media.ExifInterface`; use `android.support.media.ExifInterface` from the support library instead"
        category="Correctness"
        priority="6"
        summary="Using `android.media.ExifInterface`"
        explanation="The `android.media.ExifInterface` implementation has some known security bugs in older versions of Android. There is a new implementation available of this library in the support library, which is preferable."
        errorLine1="import android.graphics.drawable.Drawable;"
        errorLine2="                                    ^">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\BitmapUtil.java"
            line="15"
            column="37"/>
    </issue>

    <issue
        id="OldTargetApi"
        severity="Warning"
        message="Not targeting the latest versions of Android; compatibility &#xA;modes apply. Consider testing and updating this version. &#xA;Consult the android.os.Build.VERSION_CODES javadoc for details."
        category="Correctness"
        priority="6"
        summary="Target SDK attribute is not targeting latest version"
        explanation="When your application runs on a version of Android that is more recent than your `targetSdkVersion` specifies that it has been tested with, various compatibility modes kick in. This ensures that your application continues to work, but it may look out of place. For example, if the `targetSdkVersion` is less than 14, your app may get an option button in the UI.&#xA;&#xA;To fix this issue, set the `targetSdkVersion` to the highest available value. Then test your app to make sure everything works correctly. You may want to consult the compatibility notes to see what changes apply to each version you are adding support for: http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        url="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        urls="http://developer.android.com/reference/android/os/Build.VERSION_CODES.html"
        errorLine1="        targetSdkVersion 23"
        errorLine2="        ~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\build.gradle"
            line="7"
            column="9"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on \&#xA;devices from other vendors, and it may suddenly stop working (if the API is removed) or crash \&#xA;spectacularly (if the API behavior changes, since there are no guarantees for compatibility.)"
        errorLine1="        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {"
        errorLine2="                                                 ^">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\KeyUtil.java"
            line="63"
            column="50"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on \&#xA;devices from other vendors, and it may suddenly stop working (if the API is removed) or crash \&#xA;spectacularly (if the API behavior changes, since there are no guarantees for compatibility.)"
        errorLine1="            Method getMobileDataEnabledMethod = tm.getClass().getDeclaredMethod(&quot;getDataEnabled&quot;);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\util\NetworkUtils.java"
            line="113"
            column="49"/>
    </issue>

    <issue
        id="PrivateApi"
        severity="Warning"
        message="Accessing internal APIs via reflection is not supported and may not work on all devices or in the future"
        category="Correctness"
        priority="6"
        summary="Using Private APIs"
        explanation="Using reflection to access hidden/private Android APIs is not safe; it will often not work on \&#xA;devices from other vendors, and it may suddenly stop working (if the API is removed) or crash \&#xA;spectacularly (if the API behavior changes, since there are no guarantees for compatibility.)"
        errorLine1="            Method setMobileDataEnabledMethod = tm.getClass().getDeclaredMethod(&quot;setDataEnabled&quot;, boolean.class);"
        errorLine2="                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\util\NetworkUtils.java"
            line="132"
            column="49"/>
    </issue>

    <issue
        id="SdCardPath"
        severity="Warning"
        message="Do not hardcode &quot;/sdcard/&quot;; use `Environment.getExternalStorageDirectory().getPath()` instead"
        category="Correctness"
        priority="6"
        summary="Hardcoded reference to `/sdcard`"
        explanation="Your code should not reference the `/sdcard` path directly; instead use \&#xA;`Environment.getExternalStorageDirectory().getPath()`.&#xA;&#xA;Similarly, do not reference the `/data/data/` path directly; it can vary in multi-user scenarios. \&#xA;Instead, use `Context.getFilesDir().getPath()`."
        url="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        urls="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"
        errorLine1="            xmlSerializer.setOutput(new FileOutputStream(new File(&quot;/mnt/sdcard/backupsms.xml&quot;)), &quot;utf-8&quot;);"
        errorLine2="                                                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\util\PhoneUtils.java"
            line="361"
            column="67"/>
    </issue>

    <issue
        id="SimpleDateFormat"
        severity="Warning"
        message="To get local formatting use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()`, or use `new SimpleDateFormat(String template, Locale locale)` with for example `Locale.US` for ASCII dates."
        category="Correctness"
        priority="6"
        summary="Implied locale in date format"
        explanation="Almost all callers should use `getDateInstance()`, `getDateTimeInstance()`, or `getTimeInstance()` to get a ready-made instance of SimpleDateFormat suitable for the user&apos;s locale. The main reason you&apos;d create an instance this class directly is because you need to format/parse a specific machine-readable format, in which case you almost certainly want to explicitly ask for US to ensure that you get ASCII digits (rather than, say, Arabic digits).&#xA;&#xA;Therefore, you should either use the form of the SimpleDateFormat constructor where you pass in an explicit locale, such as Locale.US, or use one of the get instance methods, or suppress this error if really know what you are doing."
        url="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        urls="http://developer.android.com/reference/java/text/SimpleDateFormat.html"
        errorLine1="  int day = aCalendar.get(Calendar.DAY_OF_MONTH);"
        errorLine2="                ^">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\Log.java"
            line="146"
            column="17"/>
    </issue>

    <issue
        id="GradleDependency"
        severity="Warning"
        message="A newer version of com.android.support:appcompat-v7 than 25.3.1 is available: 25.4.0"
        category="Correctness"
        priority="4"
        summary="Obsolete Gradle Dependency"
        explanation="This detector looks for usages of libraries where the version you are using is not the current stable release. Using older versions is fine, and there are cases where you deliberately want to stick with an older version. However, you may simply not be aware that a more recent version is available, and that is what this lint check helps find."
        errorLine1="    compile &apos;com.android.support:appcompat-v7:25.3.1&apos;"
        errorLine2="    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\build.gradle"
            line="54"
            column="5"/>
    </issue>

    <issue
        id="Recycle"
        severity="Warning"
        message="This `Cursor` should be freed up after use with `#close()`"
        category="Performance"
        priority="7"
        summary="Missing `recycle()` calls"
        explanation="Many resources, such as TypedArrays, VelocityTrackers, etc., should be recycled (with a `recycle()` call) after use. This lint check looks for missing `recycle()` calls."
        errorLine1="        Cursor cursor = resolver.query(uri, new String[]{&quot;address&quot;, &quot;date&quot;, &quot;type&quot;, &quot;body&quot;}, null, null, null);"
        errorLine2="                                 ~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\util\PhoneUtils.java"
            line="351"
            column="34"/>
    </issue>

    <issue
        id="StaticFieldLeak"
        severity="Warning"
        message="Do not place Android context classes in static fields; this is a memory leak (and also breaks Instant Run)"
        category="Performance"
        priority="6"
        summary="Static Field Leaks"
        explanation="A static field will leak contexts.&#xA;&#xA;Non-static inner classes have an implicit reference to their outer class. If that outer class is for example a `Fragment` or `Activity`, then this reference means that the long-running handler/loader/task will hold a reference to the activity which prevents it from getting garbage collected.&#xA;&#xA;Similarly, direct field references to activities and fragments from these longer running instances can cause leaks.&#xA;&#xA;ViewModel classes should never point to Views or non-application Contexts."
        errorLine1=" public static boolean saveLog = false;"
        errorLine2="  ~~~~~~">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\java\com\lansent\cannan\util\Log.java"
            line="48"
            column="3"/>
    </issue>

    <issue
        id="UnusedResources"
        severity="Warning"
        message="The resource `R.string.app_name` appears to be unused"
        category="Performance"
        priority="3"
        summary="Unused resources"
        explanation="Unused resources make applications larger and slow down builds."
        errorLine1="    &lt;string name=&quot;app_name&quot;>MyRX&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~"
        quickfix="studio">
        <location
            file="C:\workspace\git_svn\MyApplication3\myrx\src\main\res\values\strings.xml"
            line="2"
            column="13"/>
    </issue>

</issues>
